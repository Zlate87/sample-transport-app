apply plugin: 'com.android.application'

android {
	compileSdkVersion 23
	buildToolsVersion "23.0.2"

	defaultConfig {
		applicationId "com.zlate87.sample_transport_app"
		minSdkVersion 15
		targetSdkVersion 23
		versionCode 1
		versionName "1.0"

		testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
	}

	productFlavors {
		// this flavor will use dummy data instead of communicating with a real backend
		dummyData {
			applicationIdSuffix ".dummydata"
		}

		production {
			applicationIdSuffix ".production"
		}
	}

	buildTypes {
		release {
			minifyEnabled false
			proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
		}
	}

	sourceSets {
		main.java.srcDirs += 'src/main/generated'
	}

	lintOptions {
		// needed by moshi, because in it okio.Okio is referencing java.nio.file, but it is not included in Android
		warning 'InvalidPackage'
	}

	packagingOptions {
		exclude 'META-INF/LICENSE.txt'
		exclude 'META-INF/NOTICE.txt'
	}
}

// Android APT plugin needed for Dagger 2
apply plugin: 'com.neenbedankt.android-apt'

if (project.hasProperty('travisBuild')) {
	apply from: 'scripts/travis.gradle'
}

dependencies {
	// Android support libraries
	compile "com.android.support:appcompat-v7:$comAndroidSupport"
	compile "com.android.support:design:$comAndroidSupport"
	compile "com.google.android.gms:play-services-maps:$comGooglePlayservices"

	// moshi, a JSON library
	compile "com.squareup.moshi:moshi:$comSquareupMoshi_moshi"

	// dagger, used for dependencies injection
	compile "com.google.dagger:dagger:$comGoogleDagger"
	apt "com.google.dagger:dagger-compiler:$comGoogleDagger"
	provided "org.glassfish:javax.annotation:$orgGlassfish_javaxAnnotation"

	// guava, used for reading files
	compile "com.google.guava:guava:$comGoogleGuava_guava"

	// rx android
	compile "io.reactivex:rxandroid:$ioReactivex_rxandroid"
	compile "io.reactivex:rxjava:$ioReactivex_rxjava"

	// joda time
	compile "net.danlew:android.joda:$jodaTime"

	// android-maps-utils, for working with polilines
	compile "com.google.maps.android:android-maps-utils:$comGoogleMapsAndroid_androidMapsUtils"

	// JUnit test dependencies
	testCompile "junit:junit:$junit_junit"
	testCompile "org.robolectric:robolectric:$orgRobolectric_robolectric"
	testCompile "org.mockito:mockito-core:$orgMockito_mockitoCore"
	testCompile "org.hamcrest:hamcrest-core:$orgHamcrest_hamcrestCore"
	testCompile "joda-time:joda-time:$jodaTime"
	testCompile "org.powermock:powermock-module-junit4:$orgPowermock"
	testCompile "org.powermock:powermock-module-junit4-rule:$orgPowermock"
	testCompile "org.powermock:powermock-api-mockito:$orgPowermock"
	testCompile "org.powermock:powermock-classloading-xstream:$orgPowermock"

	// Android instrument test dependencies
	androidTestCompile "com.android.support:support-annotations:$comAndroidSupport"
	androidTestCompile "com.android.support.test:runner:$comAndroidSupportTest"
	androidTestCompile "com.android.support.test:rules:$comAndroidSupportTest"
	androidTestCompile "com.android.support.test.espresso:espresso-core:$comAndroidSupportTestEspresso"
	androidTestCompile "com.android.support.test.espresso:espresso-intents:$comAndroidSupportTestEspresso"
	androidTestCompile "org.mockito:mockito-core:$orgMockito_mockitoCore"
	androidTestCompile "com.google.dexmaker:dexmaker:$comGoogleDexmaker"
	androidTestCompile "com.google.dexmaker:dexmaker-mockito:$comGoogleDexmaker"
	androidTestApt "com.google.dagger:dagger-compiler:$comGoogleDagger"
}
